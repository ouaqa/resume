// polyfills
// @koala-append "polyfills/rAF.min.js"
// @koala-append "polyfills/html5-dataset.min.js"

// generic
// @koala-append "toolbox/toolbox.js"
// @koala-append "visibility/visibilityManager.js"
// @koala-append "animate/animate-on-display.js"
 
// specific scripts
// @koala-append "skills/skills.js" 
// @koala-append "nav-jumper/nav-jumper.js"   

!function(){for(var n=0,a=["ms","moz","webkit","o"],t=0;t<a.length&&!window.requestAnimationFrame;++t)window.requestAnimationFrame=window[a[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[a[t]+"CancelAnimationFrame"]||window[a[t]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(a){var t=(new Date).getTime(),e=Math.max(0,16-(t-n)),o=window.setTimeout(function(){a(t+e)},e);return n=t+e,o}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(n){clearTimeout(n)})}();

if(Function.prototype.bind||(Function.prototype.bind=function(t){"use strict";if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var e=Array.prototype.slice.call(arguments,1),n=this,r=function(){},o=function(){return n.apply(this instanceof r&&t?this:t,e.concat(Array.prototype.slice.call(arguments)))};return r.prototype=this.prototype,o.prototype=new r,o}),function(){"use strict";var t=Object.prototype,e=t.__defineGetter__,n=t.__defineSetter__,r=t.__lookupGetter__,o=t.__lookupSetter__,i=t.hasOwnProperty;e&&n&&r&&o&&(Object.defineProperty||(Object.defineProperty=function(t,a,c){if(arguments.length<3)throw new TypeError("Arguments not optional");if(a+="",i.call(c,"value")&&(r.call(t,a)||o.call(t,a)||(t[a]=c.value),i.call(c,"get")||i.call(c,"set")))throw new TypeError("Cannot specify an accessor and a value");if(!(c.writable&&c.enumerable&&c.configurable))throw new TypeError("This implementation of Object.defineProperty does not support false for configurable, enumerable, or writable.");return c.get&&e.call(t,a,c.get),c.set&&n.call(t,a,c.set),t}),Object.getOwnPropertyDescriptor||(Object.getOwnPropertyDescriptor=function(t,e){if(arguments.length<2)throw new TypeError("Arguments not optional.");e+="";var n={configurable:!0,enumerable:!0,writable:!0},a=r.call(t,e),c=o.call(t,e);return i.call(t,e)?a||c?(delete n.writable,n.get=n.set=void 0,a&&(n.get=a),c&&(n.set=c),n):(n.value=t[e],n):n}),Object.defineProperties||(Object.defineProperties=function(t,e){var n;for(n in e)i.call(e,n)&&Object.defineProperty(t,n,e[n])}))}(),!(document.documentElement.dataset||Object.getOwnPropertyDescriptor(Element.prototype,"dataset")&&Object.getOwnPropertyDescriptor(Element.prototype,"dataset").get)){var propDescriptor={enumerable:!0,get:function(){"use strict";var t,e,n,r,o,i,a=this,c=this.attributes,d=c.length,u=function(t){return t.charAt(1).toUpperCase()},l=function(){return this},s=function(t,e){return"undefined"!=typeof e?this.setAttribute(t,e):this.removeAttribute(t)};try{({}).__defineGetter__("test",function(){}),e={}}catch(f){e=document.createElement("div")}for(t=0;d>t;t++)if(i=c[t],i&&i.name&&/^data-\w[\w\-]*$/.test(i.name)){n=i.value,r=i.name,o=r.substr(5).replace(/-./g,u);try{Object.defineProperty(e,o,{enumerable:this.enumerable,get:l.bind(n||""),set:s.bind(a,r)})}catch(p){e[o]=n}}return e}};try{Object.defineProperty(Element.prototype,"dataset",propDescriptor)}catch(e){propDescriptor.enumerable=!1,Object.defineProperty(Element.prototype,"dataset",propDescriptor)}}

// Array Remove - By John Resig (MIT Licensed)
Array.prototype.remove = function(from, to) {
  var rest = this.slice((to || from) + 1 || this.length);
  this.length = from < 0 ? this.length + from : from;
  return this.push.apply(this, rest);
};

// easing functions http://goo.gl/5HLl8
Math.easeInOutQuad = function (t, b, c, d) {
  t /= d/2;
  if (t < 1) {
    return c/2*t*t + b
  }
  t--;
  return -c/2 * (t*(t-2) - 1) + b;
};
 
Math.easeInCubic = function(t, b, c, d) {
  var tc = (t/=d)*t*t;
  return b+c*(tc);
};
 
Math.inOutQuintic = function(t, b, c, d) {
  var ts = (t/=d)*t,
  tc = ts*t;
  return b+c*(6*tc*ts + -15*ts*ts + 10*tc);
};

var toolBox = new _toolBox() ; 
window.toolBox = toolBox;

function _toolBox () {}

// return screen size of possible value :  1, 2 or 3 for small, medium & large.
_toolBox.prototype.getScreenSize = function()
{
    'use strict';
    var currentSize = window.getComputedStyle(document.querySelector('body'), ':after' ).getPropertyValue('content'); 
    currentSize = currentSize.replace(/\D/g,'');
    return parseInt(currentSize) ; 
}

_toolBox.prototype.getViewPortHeight = function()
{
  'use strict';
   return document.documentElement.clientHeight || window.innerHeight;
}

// http://stackoverflow.com/a/5598797/989439
_toolBox.prototype.getAbsoluteOffset = function(el)
{
  'use strict';
    var offsetTop = 0, offsetLeft = 0;
    do {
      if ( !isNaN( el.offsetTop ) ) {
        offsetTop += el.offsetTop;
      }
      if ( !isNaN( el.offsetLeft ) ) {
        offsetLeft += el.offsetLeft;
      }
    } while( el = el.offsetParent )

    return {
      top : offsetTop,
      left : offsetLeft
    }
}
// /-/-/-/-/-/-/-/

// handle for document ready
_toolBox.prototype.readyAndWilling = function(fn) 
{
    'use strict';
    if (document.readyState== 'complete')
    {
        fn();
        return;
    }

    if (document.addEventListener) 
    { document.addEventListener('DOMContentLoaded', fn); } 
    else 
    {
        document.attachEvent('onreadystatechange', function() 
        {
            if (document.readyState === 'interactive')
            { fn(); }
        }); 
    }
}

// load a media, througt a GET request.
_toolBox.prototype.loadMedia = function (url,onResult,onFault)
{
    'use strict';
    var request = new XMLHttpRequest();
    request.open ('GET',url,true);

    request.onload = function() {
    if (request.status >= 200 && request.status < 400)
    {
        onResult( request.responseText);
    } 
    else 
    {
        onFault();
    }
    };

    request.onerror = function() 
    {
        onFault();
    };

    request.send();
}



// return element's outer height including margins
_toolBox.prototype.outerHeight = function (el)
{
    'use strict';
  var height = el.offsetHeight;
  var style = getComputedStyle(el);

  height += parseInt(style.marginTop) + parseInt(style.marginBottom);
  return height;
}


var visibilityManager = new _visibilityManager();
window.visibilityManager = visibilityManager ;

function _visibilityInstance()
{
    this.element = null ;
    this.callback = null ;
    this.dispatchOnce = false ;
    

}




function _visibilityManager ()
{
    'use strict';
    this.visibilityInstancesList = Array(); 
    this._isTicking = false;
    this._latestScrollY = window.pageYOffset || window.document.documentElement.scrollTop;

    this._viewedHeight = this._latestScrollY + toolBox.getViewPortHeight() ;
} 


_visibilityManager.prototype.isVisible = function (el,h)
{
    'use strict';
  
    var elOffsetHeight = el.offsetHeight,
        scrolled = this._latestScrollY ,
        viewedHeight = this._viewedHeight,
        elTop = toolBox.getAbsoluteOffset(el).top ,
        elBottom = elTop + elOffsetHeight,
        // if 0, the element is considered in the viewport as soon as it enters.
        // if 1, the element is considered in the viewport only when it's fully inside
        // value in percentage (1 >= h >= 0)
            h = h || 0;

        return ( 
            (elTop + elOffsetHeight * h) <= viewedHeight &&
            (elBottom - elOffsetHeight * h) >= scrolled 
            );

}


_visibilityManager.prototype._requestTick = function()
{
    'use strict';
    if (this._isTicking == false )
    {
        requestAnimationFrame(this._updateVisibility)
    }
    this._isTicking = true ;
}



_visibilityManager.prototype._refreshValues = function()
{
    'use strict';

    window.visibilityManager._latestScrollY = window.pageYOffset || window.document.documentElement.scrollTop; 
    window.visibilityManager._requestTick();
}

_visibilityManager.prototype._updateVisibility = function()
{
    'use strict';

    var self = window.visibilityManager ,
    len = self.visibilityInstancesList.length ,
    instance = null ,
    cpt = 0,
    element = null;


    if (len>0)
    {
        //refresh global values
        self._viewedHeight = self._latestScrollY + toolBox.getViewPortHeight();
        
        while (cpt<len)
        {
            instance = self.visibilityInstancesList[cpt] ; 

            element = instance.element ;  

            if (self.isVisible(element))
            {
                instance.callback(element);
                if (instance.dispatchOnce)
                { 
                    self.visibilityInstancesList.remove(cpt); 
                    cpt--;
                    len--;
                }
            }
            instance = null ;
            element = null ;
            cpt++;
        }
    }


    instance = null ;
    element = null ;        

    if (self.visibilityInstancesList == 0)
    { self._detachVisibilityHandler(); }


    // reset Tick
    self._isTicking = false ;
}


_visibilityManager.prototype.addOnce = function (el,callback)
{
    'use strict';
    var visibilityInstance = new _visibilityInstance();
    visibilityInstance.element = el ;
    visibilityInstance.callback = callback ;
    visibilityInstance.dispatchOnce = true ; 

    this._attachVisibilityHandler(visibilityInstance.handler);


    this.visibilityInstancesList.push(visibilityInstance);

    if (this.visibilityInstancesList == 1)
    {
        this._detachVisibilityHandler();
        this._attachVisibilityHandler();
    }

    visibilityInstance = null ;

}

_visibilityManager.prototype.add = function (el,callback)
{
    'use strict';
    var visibilityInstance = new _visibilityInstance();
    visibilityInstance.element = el ;
    visibilityInstance.callback = callback ;
    visibilityInstance.dispatchOnce = false ; 

    this._attachVisibilityHandler(visibilityInstance.handler);


    this.visibilityInstancesList.push(visibilityInstance);

    if (this.visibilityInstancesList == 1)
    {
        this._detachVisibilityHandler();
        this._attachVisibilityHandler();
    }

    visibilityInstance = null ;
}

_visibilityManager.prototype.remove = function (el)
{
   'use strict';
    var len = this.visibilityInstancesList.length ,
    instance = null ;

    if (len>0)
    {
        var cpt = 0;
        var found = false ;
        while (cpt<len&&found==false)
        {
            instance = this.visibilityInstancesList[cpt] ;            
            if (instance.element===el)
            {
                found=true;
                this.visibilityInstancesList.remove(cpt);
                break;
            }
            cpt++;
        }
    }

    if (this.visibilityInstancesList == 0)
    {
        this._detachVisibilityHandler();
    }

    instance = null;
}


_visibilityManager.prototype._attachVisibilityHandler = function()
{
    'use strict';
    if (window.addEventListener) 
    {
        addEventListener('DOMContentLoaded', this._refreshValues, false); 
        addEventListener('load', this._refreshValues, false); 
        addEventListener('scroll', this._refreshValues, false); 
        addEventListener('resize', this._refreshValues, false); 
    } else if (window.attachEvent)  {
        attachEvent('onDOMContentLoaded', this._refreshValues); // IE9+ :(
        attachEvent('onload', this._refreshValues);
        attachEvent('onscroll', this._refreshValues);
        attachEvent('onresize', this._refreshValues);
    }
}

_visibilityManager.prototype._detachVisibilityHandler = function()
{
    'use strict';
    if (window.addEventListener) 
    {
        removeEventListener('DOMContentLoaded', this._refreshValues, false); 
        removeEventListener('load', this._refreshValues, false); 
        removeEventListener('scroll', this._refreshValues, false); 
        removeEventListener('resize', this._refreshValues, false); 
    } else if (window.attachEvent)  {
        detachEvent('onDOMContentLoaded', this._refreshValues); // IE9+ :(
        detachEvent('onload', this._refreshValues);
        detachEvent('onscroll', this._refreshValues);
        detachEvent('onresize', this._refreshValues);
    }
}



var animateClasses = Array('animate__moveUp', 'animate__scaleUp' ,'animate__fall' ,'animate__fly', 'animate__flip', 'animate__helix', 'animate__left', 'animate__right');

toolBox.readyAndWilling(initAnimateOnDisplay) ;


// if initial screen resolution is okay we listen for animations.
function initAnimateOnDisplay()
{
    // first we check if animations are to be included.
    if (toolBox.getScreenSize()>1)
    {
        anim_Elements = document.querySelectorAll('.js-animate--once');      

        //injecting svg.
        Array.prototype.forEach.call(anim_Elements, 
        function(el, i)
        {
            // adding animate class to hide
            if (el.classList)
            { el.classList.add('animate'); }
            else
            { el.className += ' animate'; }

            // adding more animate class if necessarry
                if (typeof (el.dataset.animateinit) != 'undefined')
                {
                    if (el.classList)
                    { el.classList.add(el.dataset.animateInit); }
                    else
                    { el.className += ' ' + el.dataset.animateInit; }
                }
            

            if (!visibilityManager.isVisible(el))
            {
                visibilityManager.addOnce(el,animateWhenVisible);
            }
            else
            {
                animateWhenVisible (el);
            }
        });
    }
}


function animateWhenVisible(el)
{
    el.offsetWidth  = el.offsetWidth  ;
    var animationClass  = el.dataset.animate || 'animate__rand' ;

    if (animationClass == 'animate__rand' )
    {
        animationClass = animateClasses[Math.floor(Math.random()*animateClasses.length)];
    }
    
   if (el.classList)
    { el.classList.add(animationClass); }
    else
    { el.className += ' ' + animationClass; }
}



var svgElList = Array();

toolBox.readyAndWilling(initSvgSkills) ;

// load svg file to inject in skills container.
function initSvgSkills()
{
    'use strict';
    toolBox.loadMedia('media/svg/skill__svg.svg',svgLoadSucess,svgLoadFail);
}

function svgLoadSucess (payload)
{
    'use strict';
    //injecting svg to all skill meters
    var elements = document.querySelectorAll('.skill__meter');
    //injecting svg.
    Array.prototype.forEach.call(elements, 
        function(el, i)
        {
            // inject svg instance
            el.innerHTML = payload + el.innerHTML;
         
            if (el.classList)
            {  el.classList.add('skill__meter--circled'); }
            else
            { el.className += ' ' + 'skill__meter--circled'; }

            var svgEl = new SVGEl(el.querySelector('svg.skill__svg'));
            svgElList.push([el,svgEl]);

            if (!visibilityManager.isVisible(el))
            {
                visibilityManager.addOnce(el,isVisible);

            }
            else
            {
                isVisible (el);
            }
        }
    );
}

function isVisible (el)
{
    'use strict';
    var svgEl = getSvgEl(el);
    var percent = el.dataset.level.split('-');
    var ratio = percent[0]/percent[1];

    svgEl.draw(ratio);
}

function getSvgEl (el)
{
    'use strict';
    var len = svgElList.length ;
    if (len>0)
    {
        var cpt = 0;
        var found = false ;
        while (cpt<len&&found==false)
        {
            if (svgElList[cpt][0]===el)
            {
                return svgElList[cpt][1];
                break;
            }
            cpt++;
        }

        if (!found)
        {
            var svgEl = new SVGEl(el.querySelector('svg.skill__svg'));
            svgElList.push([el,svgEl]);
            return svgEl ;
        }
    }
}

function svgLoadFail ()
{

}


    function SVGEl( el ) 
    {
        'use strict';
        this.el = el;
        // the path elements
        this.paths = [].slice.call( this.el.querySelectorAll( 'path' ) );
        // we will save both paths and its lengths in arrays
        this.pathsArr = new Array();
        this.lengthsArr = new Array();
        this._init();
    }

    SVGEl.prototype._init = function() {
        'use strict';
        var self = this;
        this.paths.forEach( function( path, i ) {
            self.pathsArr[i] = path;
            path.style.strokeDasharray = self.lengthsArr[i] = path.getTotalLength();
        } );
        // undraw stroke
        this.draw(0);
    }

    // val in [0,1] : 0 - no stroke is visible, 1 - stroke is visible
    SVGEl.prototype.draw = function( val ) {
        'use strict';
        for( var i = 0, len = this.pathsArr.length; i < len; ++i ){
            this.pathsArr[ i ].style.strokeDashoffset = this.lengthsArr[ i ] * ( 1 - val );
        }
    }

// inspired by https://gist.github.com/james2doyle/5694700

var nav_button,
    nav_anchorList,
    nav_index = 0 ,
    nav_anchorLen,
    nav_startY,
    nav_destinationY,
    nav_currentDiffY,
    nav_event = 'click',
    nav_duration = 500,
    nav_startTime,
    nav_currentTime,
    nav_timeIncrement = 20,
    nav_callback = updateArrowDirection,
    // figure out if this is moz || IE because they use documentElement
    nav_doc = (navigator.userAgent.indexOf('Firefox') != -1 || navigator.userAgent.indexOf('MSIE') != -1) ? document.documentElement : document.body;

toolBox.readyAndWilling(initNavJumper) ;

function initNavJumper ()
{
    'use strict' ;
    nav_button = document.querySelector('.js-nav-jumper__button');
    nav_anchorList = document.querySelectorAll('section');
    nav_anchorLen = nav_anchorList.length  ;

    

    // set current index.
    refreshCursorIndex();

    if (nav_button.addEventListener) 
    { nav_button.addEventListener(nav_event, nav_clickHandler); } 
    else 
    {
        nav_button.attachEvent('on' + nav_event, function()
        { nav_clickHandler.call(nav_button); });
    }


    
}

function refreshCursorIndex()
{
    'use strict' ;
    nav_startY = nav_doc.scrollTop ;

    var anchor,
    anchorPos;
    nav_index = 0 ;
    while (nav_index<nav_anchorLen  )
    {
        anchor = nav_anchorList[nav_index] ;
        anchorPos = anchor.offsetTop ;
        if (nav_startY<anchorPos)
        { break ; }
        nav_index++;
    }

    updateArrowDirection();

    anchor = null;
    anchorPos = null ;
}

function updateArrowDirection()
{
    'use strict' ;
    nav_button.dataset.direction = (nav_index == nav_anchorLen) ? 'up' : 'down'
}

function nav_clickHandler(event)
{
    'use strict' ;
    refreshCursorIndex();

    if (nav_index == nav_anchorLen) 
    {
        nav_destinationY = 0 ;
        nav_index = 0 ;
    }
    else
    {
        var anchor = nav_anchorList[nav_index] ;
        nav_destinationY = anchor.offsetTop ;
        nav_index = nav_index+1 ;    
    }
    nav_startTime = null;
    nav_doScroll();
}


 
function nav_doScroll( ) 
{
 'use strict' ;
  nav_startY = nav_doc.scrollTop,
  nav_currentDiffY = nav_destinationY - nav_startY,
  nav_currentTime = 0;

  nav_animateScroll();
}

// see https://gist.github.com/james2doyle/5694700
function nav_animateScroll()
{
    'use strict' ;
    // increment the time
    nav_currentTime += nav_timeIncrement;
    // find the value with the quadratic in-out easing function
    var val = Math.easeInOutQuad(nav_currentTime, nav_startY, nav_currentDiffY, nav_duration);
    // move the document.body
    nav_doc.scrollTop = val;
    // do the animation unless its over
    if(nav_currentTime < nav_duration) {
      window.requestAnimationFrame(nav_animateScroll);
    } else {
      if (nav_callback && typeof(nav_callback) === 'function') {
        // the animation is done so lets callback
        nav_callback();
      }
    }
}
